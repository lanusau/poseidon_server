package com.untd.database.poseidon.model.database;
// Generated Dec 2, 2015 11:41:41 AM by Hibernate Tools 4.3.1.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Type;

import com.untd.database.poseidon.model.MessageFormat;
import com.untd.database.poseidon.model.Notification;
import com.untd.database.poseidon.model.QueryType;
import com.untd.database.poseidon.model.Severity;

/**
 * Script generated by hbm2java
 */
@Entity
@Table(name = "psd_script", uniqueConstraints = @UniqueConstraint(columnNames = "name") )
public class Script implements java.io.Serializable {

	private static final long serialVersionUID = -6466358204147076813L;
	
	private Integer scriptId;
	private String name;
	private String description;
	private String scheduleMin;
	private String scheduleHour;
	private String scheduleDay;
	private String scheduleMonth;
	private String scheduleWeek;
	private QueryType queryType;
	private String queryText;
	private int timeoutSec;
	private Severity fixedSeverity;
	private Integer severityColumnPosition;
	private Integer valueMedSeverity;
	private Integer valueHighSeverity;
	private String expressionText;
	private MessageFormat messageFormat;
	private String messageSubject;
	private String messageHeader;
	private String messageTextStr;
	private String messageFooter;
	private String statusCode;
	private Date createSysdate;
	private Date updateSysdate;
	private Set<ScriptNotification> scriptNotifications;
	private Set<ScriptPersonNotification> scriptPersonNotifications;

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "script_id", unique = true, nullable = false)
	public Integer getScriptId() {
		return this.scriptId;
	}

	public void setScriptId(Integer scriptId) {
		this.scriptId = scriptId;
	}

	@Column(name = "name", unique = true, nullable = false, length = 200)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", nullable = false, length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "schedule_min", nullable = false, length = 100)
	public String getScheduleMin() {
		return this.scheduleMin;
	}

	public void setScheduleMin(String scheduleMin) {
		this.scheduleMin = scheduleMin;
	}

	@Column(name = "schedule_hour", nullable = false, length = 100)
	public String getScheduleHour() {
		return this.scheduleHour;
	}

	public void setScheduleHour(String scheduleHour) {
		this.scheduleHour = scheduleHour;
	}

	@Column(name = "schedule_day", nullable = false, length = 100)
	public String getScheduleDay() {
		return this.scheduleDay;
	}

	public void setScheduleDay(String scheduleDay) {
		this.scheduleDay = scheduleDay;
	}

	@Column(name = "schedule_month", nullable = false, length = 100)
	public String getScheduleMonth() {
		return this.scheduleMonth;
	}

	public void setScheduleMonth(String scheduleMonth) {
		this.scheduleMonth = scheduleMonth;
	}

	@Column(name = "schedule_week", nullable = false, length = 100)
	public String getScheduleWeek() {
		return this.scheduleWeek;
	}

	public void setScheduleWeek(String scheduleWeek) {
		this.scheduleWeek = scheduleWeek;
	}

	@Column(name = "query_type", nullable = false)
	@Type(type="com.untd.database.poseidon.model.database.types.QueryTypeUserType")
	public QueryType getQueryType() {
		return this.queryType;
	}

	public void setQueryType(QueryType queryType) {
		this.queryType = queryType;
	}

	@Column(name = "query_text", length = 65535)
	public String getQueryText() {
		return this.queryText;
	}

	public void setQueryText(String queryText) {
		this.queryText = queryText;
	}

	@Column(name = "timeout_sec", nullable = false)
	public int getTimeoutSec() {
		return this.timeoutSec;
	}

	public void setTimeoutSec(int timeoutSec) {
		this.timeoutSec = timeoutSec;
	}

	@Column(name = "fixed_severity", nullable = false)
	@Type(type = "com.untd.database.poseidon.model.database.types.SeverityUserType")
	public Severity getFixedSeverity() {
		return this.fixedSeverity;
	}

	public void setFixedSeverity(Severity fixedSeverity) {
		this.fixedSeverity = fixedSeverity;
	}

	@Column(name = "severity_column_position")
	public Integer getSeverityColumnPosition() {
		return this.severityColumnPosition;
	}

	public void setSeverityColumnPosition(Integer severityColumnPosition) {
		this.severityColumnPosition = severityColumnPosition;
	}

	@Column(name = "value_med_severity")
	public Integer getValueMedSeverity() {
		return this.valueMedSeverity;
	}

	public void setValueMedSeverity(Integer valueMedSeverity) {
		this.valueMedSeverity = valueMedSeverity;
	}

	@Column(name = "value_high_severity")
	public Integer getValueHighSeverity() {
		return this.valueHighSeverity;
	}

	public void setValueHighSeverity(Integer valueHighSeverity) {
		this.valueHighSeverity = valueHighSeverity;
	}

	@Column(name = "expression_text", length = 65535)
	public String getExpressionText() {
		return this.expressionText;
	}

	public void setExpressionText(String expressionText) {
		this.expressionText = expressionText;
	}

	@Column(name = "message_format", nullable = false)
	@Type(type="com.untd.database.poseidon.model.database.types.MessageFormatUserType")
	public MessageFormat getMessageFormat() {
		return this.messageFormat;
	}

	public void setMessageFormat(MessageFormat messageFormat) {
		this.messageFormat = messageFormat;
	}

	@Column(name = "message_subject", length = 200)
	public String getMessageSubject() {
		return this.messageSubject;
	}

	public void setMessageSubject(String messageSubject) {
		this.messageSubject = messageSubject;
	}

	@Column(name = "message_header", length = 65535)
	public String getMessageHeader() {
		return this.messageHeader;
	}

	public void setMessageHeader(String messageHeader) {
		this.messageHeader = messageHeader;
	}

	@Column(name = "message_text_str", length = 65535)
	public String getMessageTextStr() {
		return this.messageTextStr;
	}

	public void setMessageTextStr(String messageTextStr) {
		this.messageTextStr = messageTextStr;
	}

	@Column(name = "message_footer", length = 65535)
	public String getMessageFooter() {
		return this.messageFooter;
	}

	public void setMessageFooter(String messageFooter) {
		this.messageFooter = messageFooter;
	}

	@Column(name = "status_code", nullable = false, length = 1)
	public String getStatusCode() {
		return this.statusCode;
	}

	public void setStatusCode(String statusCode) {
		this.statusCode = statusCode;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_sysdate", nullable = false, length = 19)
	public Date getCreateSysdate() {
		return this.createSysdate;
	}

	public void setCreateSysdate(Date createSysdate) {
		this.createSysdate = createSysdate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "update_sysdate", nullable = false, length = 19)
	public Date getUpdateSysdate() {
		return this.updateSysdate;
	}

	public void setUpdateSysdate(Date updateSysdate) {
		this.updateSysdate = updateSysdate;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "script")
	public Set<ScriptNotification> getScriptNotifications() {
		return scriptNotifications;
	}

	public void setScriptNotifications(Set<ScriptNotification> scriptNotifications) {
		this.scriptNotifications = scriptNotifications;
	}	
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "script")
	public Set<ScriptPersonNotification> getScriptPersonNotifications() {
		return scriptPersonNotifications;
	}

	public void setScriptPersonNotifications(Set<ScriptPersonNotification> scriptPersonNotifications) {
		this.scriptPersonNotifications = scriptPersonNotifications;
	}

	/**
	 * @return string value of script ID
	 */
	@Transient
	public String getScriptIdStr() {
		return String.valueOf(scriptId);
	}	
	
	/**
	 * Get full schedule string
	 * 
	 * @return full schedule
	 */
	@Transient
	public String getFullSchedule() {
		// Randomly pick a second to run this script, to reduce flood of executions
		// at the minute boundary
		long scheduleSec = Math.round(Math.random()*59);
		return 
			scheduleSec + " "+
			scheduleMin+" "+
			scheduleHour+" "+
			scheduleDay+" "+
			scheduleMonth+" "+
			scheduleWeek;
	}

	
	/**
	 * Calculate severity based on column value and thresholds in the script
	 * @param columnValue
	 * @return severity
	 */
	public Severity calculateSeverity(String columnValue) {
		double columnValueNumber;
		Severity severity;
		// If data is missing for some of the columns
		// return SEVERITY_HIGH
		if (
				(severityColumnPosition == null) ||
				(valueMedSeverity == null )||
				(valueHighSeverity == null)
		    ) {	return Severity.HIGH; }
		
		severity = Severity.HIGH;
		
		// Try to convert column value to double
		try {
			columnValueNumber = Double.parseDouble(columnValue);
			if (columnValueNumber < valueMedSeverity) {
				severity = Severity.LOW;
			} else if (columnValueNumber > valueHighSeverity) {
				severity = Severity.HIGH;
			} else {
				severity = Severity.MEDIUM;
			}
		} catch (Exception e) {
			severity = Severity.HIGH;
		}
		
		
		return severity;
	}
	
	/**
	 * Return notifications assigned for the script for particular severity
	 * @param script - Script
	 * @param severity - severity
	 * @return list of notifications
	 */
	@Transient
	public List<Notification> getScriptNotificationsForSeverity(Severity severity) {
        ArrayList<Notification> notificationList = new ArrayList<Notification>();
        

			for (final ScriptNotification n : this.scriptNotifications) {
				for (final NotifyGroupEmail e: n.getNotifyGroup().getNotifyGroupEmails()) {
					if (e.getSeverity() == severity) {
						notificationList.add(new Notification(severity,e.getEmailAddress()));
					}
				}
			}
			// Get directly assigned notifications
			for (final ScriptPersonNotification n : this.scriptPersonNotifications) { 
				notificationList.add(new Notification(severity,n.getEmailAddress()));
			}

		
		return notificationList;
	}

}
